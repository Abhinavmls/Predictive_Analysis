# prompt: house price prediction

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
# Assuming you have a CSV file named 'house_data.csv' in your runtime
# You might need to upload it first using google.colab.files.upload()
try:
    df = pd.read_csv('house_data.csv')
except FileNotFoundError:
    print("Error: 'house_data.csv' not found. Please upload the file.")
    # You might want to add code here to handle the missing file, e.g., use a sample dataset
    # For demonstration, let's create a simple dummy dataset if the file is not found
    data = {'square_footage': [1500, 2000, 1200, 1800, 2500, 1600, 2200, 1400, 1900, 2100],
            'bedrooms': [3, 4, 2, 3, 4, 3, 4, 2, 3, 4],
            'bathrooms': [2, 3, 1, 2, 3, 2, 3, 1, 2, 3],
            'price': [250000, 350000, 200000, 300000, 400000, 280000, 380000, 220000, 320000, 360000]}
    df = pd.DataFrame(data)
    print("Using a dummy dataset for demonstration.")


# Display the first few rows
print(df.head())

# Get basic information about the dataset
df.info()

# Get descriptive statistics
df.describe()

# Visualize the data (optional but recommended)
# Pairplot to see relationships between variables
sns.pairplot(df)
plt.show()

# Correlation heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()

# Define features (X) and target (y)
# Adjust column names based on your actual dataset
features = ['square_footage', 'bedrooms', 'bathrooms'] # Example features
target = 'price'

X = df[features]
y = df[target]

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the Linear Regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse) # Root Mean Squared Error
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error (MSE): {mse}')
print(f'Root Mean Squared Error (RMSE): {rmse}')
print(f'R-squared (R2): {r2}')

# You can also print the model coefficients
print('Coefficients:', model.coef_)
print('Intercept:', model.intercept_)

# Example prediction for a new house
new_house_features = pd.DataFrame([[1700, 3, 2]], columns=features) # Example: 1700 sq ft, 3 bedrooms, 2 bathrooms
predicted_price = model.predict(new_house_features)
print(f'Predicted price for a new house with features {new_house_features.values[0]}: ${predicted_price[0]:,.2f}')

# Visualize predictions vs actual (for test set)
plt.scatter(y_test, y_pred)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual vs Predicted Prices")
plt.show()
